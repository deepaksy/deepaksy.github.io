{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheets } from \"@material-ui/core/styles\";\nlet prefixer;\nlet cleanCSS;\n\nif (true) {\n  /* eslint-disable global-require */\n  const postcss = require(\"postcss\");\n\n  const autoprefixer = require(\"autoprefixer\");\n\n  const CleanCSS = require(\"clean-css\");\n  /* eslint-enable global-require */\n\n\n  prefixer = postcss([autoprefixer]);\n  cleanCSS = new CleanCSS();\n}\n\nexport default class MyDocument extends Document {\n  render() {\n    return /*#__PURE__*/_jsxs(Html, {\n      lang: \"en\",\n      children: [/*#__PURE__*/_jsx(Head, {}), /*#__PURE__*/_jsxs(\"body\", {\n        children: [/*#__PURE__*/_jsx(Main, {}), /*#__PURE__*/_jsx(NextScript, {})]\n      })]\n    });\n  }\n\n} // `getInitialProps` belongs to `_document` (instead of `_app`),\n// it's compatible with server-side generation (SSG).\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect( /*#__PURE__*/_jsx(App, _objectSpread({}, props)))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  let css = sheets.toString(); // It might be undefined, e.g. after an error.\n\n  if (css && true) {\n    const result1 = await prefixer.process(css, {\n      from: undefined\n    });\n    css = result1.css;\n    css = cleanCSS.minify(css).styles;\n  }\n\n  return _objectSpread(_objectSpread({}, initialProps), {}, {\n    styles: [...React.Children.toArray(initialProps.styles), /*#__PURE__*/_jsx(\"style\", {\n      id: \"jss-server-side\",\n      // eslint-disable-next-line react/no-danger\n      dangerouslySetInnerHTML: {\n        __html: css\n      }\n    }, \"jss-server-side\")]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}